package com.jetbrains.youtrack.db.internal.core;

import com.jetbrains.youtrack.db.api.exception.DatabaseException;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseDocumentTx;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

public class ExceptionNotOpenTest {

  @Test
  public void testExceptionNotOpenMemory() {

    DatabaseSessionInternal db = new DatabaseDocumentTx("memory:testExceptionNotOpenMemory");
    try {
      db.newEntity();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.delete(db.newEntity());
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.begin();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.rollback();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.commit();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.getMetadata();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
  }

  @Test
  @Ignore
  public void testExceptionNotOpenRemote() {
    try {
      var db = new DatabaseDocumentTx("remote:127.0.0.1:00");
      Assert.fail();
    } catch (DatabaseException e) {
      //ignore
    }
  }

  @Test
  public void testExceptionNotOpenPlocal() {

    DatabaseSessionInternal db = new DatabaseDocumentTx("plocal:./target/databaseCheck");
    try {
      db.newEntity();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.delete(db.newEntity());
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.begin();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.rollback();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.commit();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
    try {
      db.getMetadata();
      Assert.fail();
    } catch (DatabaseException ex) {
    }
  }
}

/* Generated By:JJTree: Do not edit this line. SQLProjection.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandSQLParsingException;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import com.jetbrains.youtrack.db.internal.core.sql.query.LegacyResultSet;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class SQLProjection extends SimpleNode {

  protected boolean distinct = false;

  List<SQLProjectionItem> items;

  // runtime
  private Set<String> excludes;

  public SQLProjection(List<SQLProjectionItem> items, boolean distinct) {
    super(-1);
    this.items = items;
    this.distinct = distinct;
    // TODO make the whole class immutable!
  }

  public SQLProjection(int id) {
    super(id);
  }

  public SQLProjection(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public List<SQLProjectionItem> getItems() {
    return items;
  }

  public void setItems(List<SQLProjectionItem> items) {
    this.items = items;
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (items == null) {
      return;
    }
    var first = true;

    if (distinct) {
      builder.append("DISTINCT ");
    }
    // print * before
    for (var item : items) {
      if (item.isAll()) {
        if (!first) {
          builder.append(", ");
        }

        item.toString(params, builder);
        first = false;
      }
    }

    // and then the rest of the projections
    for (var item : items) {
      if (!item.isAll()) {
        if (!first) {
          builder.append(", ");
        }

        item.toString(params, builder);
        first = false;
      }
    }
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    if (items == null) {
      return;
    }
    var first = true;

    if (distinct) {
      builder.append("DISTINCT ");
    }
    // print * before
    for (var item : items) {
      if (item.isAll()) {
        if (!first) {
          builder.append(", ");
        }

        item.toGenericStatement(builder);
        first = false;
      }
    }

    // and then the rest of the projections
    for (var item : items) {
      if (!item.isAll()) {
        if (!first) {
          builder.append(", ");
        }

        item.toGenericStatement(builder);
        first = false;
      }
    }
  }

  public Result calculateSingle(CommandContext iContext, Result inResult) {
    initExcludes();
    if (isExpand()) {
      throw new IllegalStateException(
          "This is an expand projection, it cannot be calculated as a single result" + this);
    }

    if (items.isEmpty()
        || (items.size() == 1 && items.get(0).isAll()) && items.get(0).nestedProjection == null) {
      return inResult;
    }

    var session = iContext.getDatabaseSession();
    var result = new ResultInternal(session);
    for (var item : items) {
      if (item.exclude) {
        continue;
      }
      if (item.isAll()) {
        if (inResult.isEntity()) {
          ((EntityImpl) inResult.castToEntity()).deserializeFields();
        }
        for (var alias : inResult.getPropertyNames()) {
          if (this.excludes.contains(alias)) {
            continue;
          }
          var val = SQLProjectionItem.convert(inResult.getProperty(alias), iContext);
          if (item.nestedProjection != null) {
            val = item.nestedProjection.apply(item.expression, val, iContext);
          }
          result.setProperty(alias, val);
        }
        if (inResult.isEntity()) {
          var x = (EntityInternal) inResult.castToEntity();
          if (!this.excludes.contains("@rid")) {
            result.setProperty("@rid", x.getIdentity());
          }
          if (!this.excludes.contains("@version")) {
            result.setProperty("@version", x.getVersion());
          }
          if (!this.excludes.contains("@class")) {
            var clazz = x.getImmutableSchemaClass(session);
            if (clazz != null) {
              result.setProperty("@class", clazz.getName(session));
            }
          }
        }
      } else {
        result.setProperty(item.getProjectionAliasAsString(), item.execute(inResult, iContext));
      }
    }

    if (inResult instanceof ResultInternal resultInternal) {
      for (var key : resultInternal.getMetadataKeys()) {
        if (!result.getMetadataKeys().contains(key)) {
          result.setMetadata(key, resultInternal.getMetadata(key));
        }
      }
    }

    return result;
  }

  private void initExcludes() {
    if (excludes == null) {
      this.excludes = new HashSet<>();
      for (var item : items) {
        if (item.exclude) {
          this.excludes.add(item.getProjectionAliasAsString());
        }
      }
    }
  }

  public LegacyResultSet calculateExpand(CommandContext iContext, Result iRecord) {
    if (!isExpand()) {
      throw new IllegalStateException("This is not an expand projection:" + this);
    }
    throw new UnsupportedOperationException("Implement expand in projection");
  }

  public boolean isExpand() {
    return items != null && items.size() == 1 && items.get(0).isExpand();
  }

  public void validate() {
    if (items != null && items.size() > 1) {
      for (var item : items) {
        if (item.isExpand()) {
          throw new CommandSQLParsingException(
              "Cannot execute a query with expand() together with other projections");
        }
      }
    }
  }

  public SQLProjection getExpandContent() {
    var result = new SQLProjection(-1);
    result.items = new ArrayList<>();
    result.items.add(this.items.get(0).getExpandContent());
    return result;
  }

  public Set<String> getAllAliases() {
    return items.stream().map(i -> i.getProjectionAliasAsString()).collect(Collectors.toSet());
  }

  public SQLProjection copy() {
    var result = new SQLProjection(-1);
    if (items != null) {
      result.items = items.stream().map(x -> x.copy()).collect(Collectors.toList());
    }
    result.distinct = distinct;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLProjection) o;

    return Objects.equals(items, that.items);
  }

  @Override
  public int hashCode() {
    return items != null ? items.hashCode() : 0;
  }

  public boolean isDistinct() {
    return distinct;
  }

  public void setDistinct(boolean distinct) {
    this.distinct = distinct;
  }

  public void extractSubQueries(SubQueryCollector collector) {
    if (items != null) {
      for (var item : items) {
        item.extractSubQueries(collector);
      }
    }
  }

  public boolean refersToParent() {
    for (var item : items) {
      if (item.refersToParent()) {
        return true;
      }
    }
    return false;
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    result.setProperty("distinct", distinct);
    if (items != null) {
      result.setProperty(
          "items", items.stream().map(oProjectionItem -> oProjectionItem.serialize(db))
              .collect(Collectors.toList()));
    }
    return result;
  }

  public void deserialize(Result fromResult) {
    distinct = fromResult.getProperty("distinct");
    if (fromResult.getProperty("items") != null) {
      items = new ArrayList<>();

      List<Result> ser = fromResult.getProperty("items");
      for (var x : ser) {
        var item = new SQLProjectionItem(-1);
        item.deserialize(x);
        items.add(item);
      }
    }
  }

  public boolean isCacheable(DatabaseSessionInternal session) {
    if (items != null) {
      for (var item : items) {
        if (!item.isCacheable(session)) {
          return false;
        }
      }
    }
    return true;
  }
}
/* JavaCC - OriginalChecksum=3a650307b53bae626dc063c4b35e62c3 (do not edit this line) */

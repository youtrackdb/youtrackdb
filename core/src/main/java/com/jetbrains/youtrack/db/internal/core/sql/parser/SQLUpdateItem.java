/* Generated By:JJTree: Do not edit this line. SQLUpdateItem.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.record.Entity;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.schema.PropertyType;
import com.jetbrains.youtrack.db.api.schema.SchemaClass;
import com.jetbrains.youtrack.db.api.schema.SchemaProperty;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.db.record.LinkList;
import com.jetbrains.youtrack.db.internal.core.db.record.LinkSet;
import com.jetbrains.youtrack.db.internal.core.db.record.ridbag.RidBag;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import javax.annotation.Nullable;

public class SQLUpdateItem extends SimpleNode {

  public static final int OPERATOR_EQ = 0;
  public static final int OPERATOR_PLUSASSIGN = 1;
  public static final int OPERATOR_MINUSASSIGN = 2;
  public static final int OPERATOR_STARASSIGN = 3;
  public static final int OPERATOR_SLASHASSIGN = 4;

  protected SQLIdentifier left;
  protected SQLModifier leftModifier;
  protected int operator;
  protected SQLExpression right;

  public SQLUpdateItem(int id) {
    super(id);
  }

  public SQLUpdateItem(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public static EntityImpl newEntityInstance(CommandContext ctx, String className,
      DatabaseSessionInternal session) {
    List<SchemaProperty> updatedPropertyStack = ctx.getSystemVariable(
        CommandContext.SQL_UPDATED_PROPERTY_STACK_SYSTEM_VARIABLE);
    var isEmbedded = false;

    if (updatedPropertyStack != null && !updatedPropertyStack.isEmpty()) {
      var currentPropertyType = updatedPropertyStack.getLast();
      if (currentPropertyType != null) {
        isEmbedded = currentPropertyType.getType(session).isEmbedded();
      }
    }

    EntityImpl retDoc;
    if (className != null) {
      if (!isEmbedded) {
        retDoc = (EntityImpl) session.newEntity(className);
      } else {
        retDoc = (EntityImpl) session.newEmbededEntity(className);
      }
    } else {
      if (!isEmbedded) {
        retDoc = (EntityImpl) session.newEntity();
      } else {
        retDoc = (EntityImpl) session.newEmbededEntity();
      }
    }
    return retDoc;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    left.toString(params, builder);
    if (leftModifier != null) {
      leftModifier.toString(params, builder);
    }
    switch (operator) {
      case OPERATOR_EQ:
        builder.append(" = ");
        break;
      case OPERATOR_PLUSASSIGN:
        builder.append(" += ");
        break;
      case OPERATOR_MINUSASSIGN:
        builder.append(" -= ");
        break;
      case OPERATOR_STARASSIGN:
        builder.append(" *= ");
        break;
      case OPERATOR_SLASHASSIGN:
        builder.append(" /= ");
        break;
    }
    right.toString(params, builder);
  }

  public void toGenericStatement(StringBuilder builder) {
    left.toGenericStatement(builder);
    if (leftModifier != null) {
      leftModifier.toGenericStatement(builder);
    }
    switch (operator) {
      case OPERATOR_EQ:
        builder.append(" = ");
        break;
      case OPERATOR_PLUSASSIGN:
        builder.append(" += ");
        break;
      case OPERATOR_MINUSASSIGN:
        builder.append(" -= ");
        break;
      case OPERATOR_STARASSIGN:
        builder.append(" *= ");
        break;
      case OPERATOR_SLASHASSIGN:
        builder.append(" /= ");
        break;
    }
    right.toGenericStatement(builder);
  }

  public SQLUpdateItem copy() {
    var result = new SQLUpdateItem(-1);
    result.left = left == null ? null : left.copy();
    result.leftModifier = leftModifier == null ? null : leftModifier.copy();
    result.operator = operator;
    result.right = right == null ? null : right.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLUpdateItem) o;

    if (operator != that.operator) {
      return false;
    }
    if (!Objects.equals(left, that.left)) {
      return false;
    }
    if (!Objects.equals(leftModifier, that.leftModifier)) {
      return false;
    }
    return Objects.equals(right, that.right);
  }

  @Override
  public int hashCode() {
    var result = left != null ? left.hashCode() : 0;
    result = 31 * result + (leftModifier != null ? leftModifier.hashCode() : 0);
    result = 31 * result + operator;
    result = 31 * result + (right != null ? right.hashCode() : 0);
    return result;
  }

  public void applyUpdate(ResultInternal result, CommandContext ctx) {
    var session = ctx.getDatabaseSession();
    var propertyName = left.getStringValue();

    List<SchemaProperty> updatedPropertyStack = ctx.getSystemVariable(
        CommandContext.SQL_UPDATED_PROPERTY_STACK_SYSTEM_VARIABLE);
    if (updatedPropertyStack == null) {
      updatedPropertyStack = new ArrayList<>();
      ctx.setSystemVariable(CommandContext.SQL_UPDATED_PROPERTY_STACK_SYSTEM_VARIABLE,
          updatedPropertyStack);
    }

    SchemaProperty schemaProperty = null;
    if (result.isEntity()) {
      var entity = (EntityInternal) result.castToEntity();
      var cls = entity.getImmutableSchemaClass(session);
      schemaProperty = cls != null ? cls.getProperty(session, propertyName) : null;
      updatedPropertyStack.add(schemaProperty);
    } else {
      updatedPropertyStack.add(null);
    }

    try {
      if (leftModifier == null) {
        var rightValue = right.execute(result, ctx);
        applyOperation(result, left, rightValue, ctx, schemaProperty);
      } else {
        var rightValue = right.execute(result, ctx);
        var linkedType = calculateLinkedTypeForThisItem(result, session);
        rightValue = convertToType(rightValue, null, linkedType, ctx);
        var val = result.getProperty(propertyName);
        if (val == null) {
          val = initSchemafullCollections(session, result, propertyName);
        }
        leftModifier.setValue(result, val, rightValue, ctx, schemaProperty);
      }
    } finally {
      updatedPropertyStack.removeLast();
    }
  }

  private Object initSchemafullCollections(DatabaseSessionInternal session, ResultInternal entity,
      String propName) {
    if (!entity.isEntity()) {
      return null;
    }
    var oClass = ((EntityInternal) entity.castToEntity()).getImmutableSchemaClass(session);
    if (oClass == null) {
      return null;
    }
    var prop = oClass.getProperty(session, propName);

    Object result = null;
    if (prop == null) {
      if (leftModifier.isArraySingleValue()) {
        result = session.newEmbeddedMap();
        entity.setProperty(propName, result);
      }
    } else {
      if (prop.getType(session) == PropertyType.EMBEDDEDMAP
          || prop.getType(session) == PropertyType.LINKMAP) {
        result = session.newLinkMap();
        entity.setProperty(propName, result);
      } else if (prop.getType(session) == PropertyType.EMBEDDEDLIST
          || prop.getType(session) == PropertyType.LINKLIST) {
        result = session.newEmbeddedList();
        entity.setProperty(propName, result);
      } else if (prop.getType(session) == PropertyType.EMBEDDEDSET
          || prop.getType(session) == PropertyType.LINKSET) {
        result = session.newEmbeddedSet();
        entity.setProperty(propName, result);
      }
    }
    return result;
  }

  private static SchemaClass calculateLinkedTypeForThisItem(ResultInternal result,
      DatabaseSessionInternal session) {
    if (result.isEntity()) {
      var entity = (EntityInternal) result.asEntity();

      return entity.getImmutableSchemaClass(session);
    }

    return null;
  }

  private void applyOperation(
      ResultInternal entity, SQLIdentifier attrName, Object rightValue, CommandContext ctx,
      @Nullable SchemaProperty schemaProperty) {
    var session = ctx.getDatabaseSession();
    switch (operator) {
      case OPERATOR_EQ:
        var newValue = convertResultToDocument(rightValue);
        newValue = convertToPropertyType(entity, attrName, newValue, ctx);
        entity.setProperty(attrName.getStringValue(),
            cleanValue(newValue, session, schemaProperty));
        break;
      case OPERATOR_MINUSASSIGN:
        entity.setProperty(
            attrName.getStringValue(),
            calculateNewValue(entity, ctx, SQLMathExpression.Operator.MINUS));
        break;
      case OPERATOR_PLUSASSIGN:
        entity.setProperty(
            attrName.getStringValue(),
            calculateNewValue(entity, ctx, SQLMathExpression.Operator.PLUS));
        break;
      case OPERATOR_SLASHASSIGN:
        entity.setProperty(
            attrName.getStringValue(),
            calculateNewValue(entity, ctx, SQLMathExpression.Operator.SLASH));
        break;
      case OPERATOR_STARASSIGN:
        entity.setProperty(
            attrName.getStringValue(),
            calculateNewValue(entity, ctx, SQLMathExpression.Operator.STAR));
        break;
    }
  }

  public static Object cleanValue(Object newValue, DatabaseSessionInternal session,
      @Nullable SchemaProperty schemaProperty) {
    var type = schemaProperty != null ? schemaProperty.getType(session) : null;
    if (type == null) {
      type = PropertyType.getTypeByValue(newValue);
    }

    if (type != null) {
      return PropertyType.convert(session, newValue, type.getDefaultJavaType());
    }

    throw new IllegalStateException("Unexpected value: " + newValue);
  }

  public static Object convertToPropertyType(
      ResultInternal res, SQLIdentifier attrName, Object newValue, CommandContext ctx) {

    var session = ctx.getDatabaseSession();
    var entity = (EntityInternal) res.asEntity();
    var optSchema = entity.getImmutableSchemaClass(session);
    if (optSchema == null) {
      return newValue;
    }

    var prop = optSchema.getProperty(ctx.getDatabaseSession(), attrName.getStringValue());
    if (prop == null) {
      return newValue;
    }

    var type = prop.getType(session);
    var linkedClass = prop.getLinkedClass(session);
    return convertToType(newValue, type, linkedClass, ctx);
  }

  private static Object convertToType(
      Object value, PropertyType type, SchemaClass linkedClass, CommandContext ctx) {
    if (type == null) {
      return value;
    }
    if (value instanceof Collection) {
      if (type == PropertyType.LINK) {
        if (((Collection<?>) value).isEmpty()) {
          value = null;
        } else if (((Collection<?>) value).size() == 1) {
          value = ((Collection<?>) value).iterator().next();
        } else {
          throw new CommandExecutionException(ctx.getDatabaseSession(),
              "Cannot assign a collection to a LINK property");
        }
      } else {
        if (type == PropertyType.EMBEDDEDLIST && linkedClass != null) {
          return ((Collection<?>) value)
              .stream()
              .map(item -> convertToType(item, linkedClass, ctx))
              .collect(Collectors.toList());

        } else if (type == PropertyType.EMBEDDEDSET && linkedClass != null) {
          return ((Collection<?>) value)
              .stream()
              .map(item -> convertToType(item, linkedClass, ctx))
              .collect(Collectors.toSet());
        }
        if (type == PropertyType.LINKSET && !(value instanceof LinkSet)) {
          var db = ctx.getDatabaseSession();
          return ((Collection<?>) value)
              .stream()
              .map(item -> PropertyType.convert(db, item, Identifiable.class))
              .collect(Collectors.toSet());
        } else if (type == PropertyType.LINKLIST && !(value instanceof LinkList)) {
          var db = ctx.getDatabaseSession();
          return ((Collection<?>) value)
              .stream()
              .map(item -> PropertyType.convert(db, item, Identifiable.class))
              .collect(Collectors.toList());
        } else if (type == PropertyType.LINKBAG && !(value instanceof RidBag)) {
          var db = ctx.getDatabaseSession();
          var bag = new RidBag(db);

          ((Collection<?>) value)
              .stream()
              .map(item -> (Identifiable) PropertyType.convert(db, item, Identifiable.class))
              .forEach(item -> bag.add(item.getIdentity()));

        }
      }
    }
    return value;
  }

  private static Object convertToType(Object item, SchemaClass linkedClass, CommandContext ctx) {
    var session = ctx.getDatabaseSession();
    if (item instanceof EntityInternal entity) {
      var currentType = entity.getImmutableSchemaClass(session);
      if (currentType == null || !currentType.isSubClassOf(session, linkedClass)) {
        var result = session.newEmbededEntity(linkedClass);

        for (var prop : entity.getPropertyNames()) {
          result.setProperty(prop, ((Entity) item).getProperty(prop));
        }

        return result;
      } else {
        return item;
      }
    } else if (item instanceof Map) {
      var result = session.newEmbededEntity(linkedClass.getName(session));

      ((Map<String, Object>) item)
          .entrySet().stream().forEach(x -> result.setProperty(x.getKey(), x.getValue()));
      return result;
    }
    return item;
  }

  public static Object convertResultToDocument(Object value) {
    if (value instanceof Result result && result.isEntity()) {
      return result.asEntity();
    }
    if (value instanceof Identifiable) {
      return value;
    }
    if (value instanceof List && containsOResult((Collection) value)) {
      return ((List) value)
          .stream().map(x -> convertResultToDocument(x)).collect(Collectors.toList());
    }
    if (value instanceof Set && containsOResult((Collection) value)) {
      return ((Set) value)
          .stream().map(x -> convertResultToDocument(x)).collect(Collectors.toSet());
    }
    return value;
  }

  public static boolean containsOResult(Collection value) {
    return value.stream().anyMatch(x -> x instanceof Result);
  }

  private Object calculateNewValue(
      ResultInternal entity, CommandContext ctx, SQLMathExpression.Operator explicitOperator) {
    var leftEx = new SQLExpression(left.copy());
    if (leftModifier != null) {
      ((SQLBaseExpression) leftEx.mathExpression).modifier = leftModifier.copy();
    }
    var mathExp = new SQLMathExpression(-1);
    mathExp.addChildExpression(leftEx.getMathExpression());
    mathExp.addChildExpression(new SQLParenthesisExpression(right.copy()));
    mathExp.addOperator(explicitOperator);
    return mathExp.execute(entity, ctx);
  }

  public SQLIdentifier getLeft() {
    return left;
  }

  public void setLeft(SQLIdentifier left) {
    this.left = left;
  }

  public SQLModifier getLeftModifier() {
    return leftModifier;
  }

  public void setLeftModifier(SQLModifier leftModifier) {
    this.leftModifier = leftModifier;
  }

  public int getOperator() {
    return operator;
  }

  public void setOperator(int operator) {
    this.operator = operator;
  }

  public SQLExpression getRight() {
    return right;
  }

  public void setRight(SQLExpression right) {
    this.right = right;
  }
}
/* JavaCC - OriginalChecksum=df7444be87bba741316df8df0d653600 (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLCreateVertexStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.internal.core.command.BasicCommandContext;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.CreateVertexExecutionPlanner;
import com.jetbrains.youtrack.db.internal.core.sql.executor.InsertExecutionPlan;
import com.jetbrains.youtrack.db.internal.core.sql.executor.InternalExecutionPlan;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class SQLCreateVertexStatement extends SQLStatement {

  SQLIdentifier targetClass;
  SQLProjection returnStatement;
  SQLInsertBody insertBody;

  public SQLCreateVertexStatement(int id) {
    super(id);
  }

  public SQLCreateVertexStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal session, Map<Object, Object> params, CommandContext parentCtx,
      boolean usePlanCache) {
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabaseSession(session);
    ctx.setInputParameters(params);
    InsertExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = (InsertExecutionPlan) createExecutionPlan(ctx, false);
    } else {
      executionPlan = (InsertExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }
    executionPlan.executeInternal();
    return new LocalResultSet(session, executionPlan);
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal session, Object[] args, CommandContext parentCtx,
      boolean usePlanCache) {
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabaseSession(session);
    Map<Object, Object> params = new HashMap<>();
    if (args != null) {
      for (var i = 0; i < args.length; i++) {
        params.put(i, args[i]);
      }
    }
    ctx.setInputParameters(params);
    InsertExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = (InsertExecutionPlan) createExecutionPlan(ctx, false);
    } else {
      executionPlan = (InsertExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }
    executionPlan.executeInternal();
    return new LocalResultSet(session, executionPlan);
  }

  @Override
  public InternalExecutionPlan createExecutionPlan(CommandContext ctx, boolean enableProfiling) {
    var planner = new CreateVertexExecutionPlanner(this);
    InternalExecutionPlan result = planner.createExecutionPlan(ctx, enableProfiling);
    result.setStatement(this.originalStatement);
    result.setGenericStatement(this.toGenericStatement());
    return result;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {

    builder.append("CREATE VERTEX ");
    if (targetClass != null) {
      targetClass.toString(params, builder);
    }
    if (returnStatement != null) {
      builder.append(" RETURN ");
      returnStatement.toString(params, builder);
    }
    if (insertBody != null) {
      if (targetClass != null || returnStatement != null) {
        builder.append(" ");
      }
      insertBody.toString(params, builder);
    }
  }

  public void toGenericStatement(StringBuilder builder) {

    builder.append("CREATE VERTEX ");
    if (targetClass != null) {
      targetClass.toGenericStatement(builder);
    }
    if (returnStatement != null) {
      builder.append(" RETURN ");
      returnStatement.toGenericStatement(builder);
    }
    if (insertBody != null) {
      if (targetClass != null || returnStatement != null) {
        builder.append(" ");
      }
      insertBody.toGenericStatement(builder);
    }
  }

  @Override
  public SQLCreateVertexStatement copy() {
    SQLCreateVertexStatement result = null;
    try {
      result = getClass().getConstructor(Integer.TYPE).newInstance(-1);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    result.targetClass = targetClass == null ? null : targetClass.copy();
    result.returnStatement = returnStatement == null ? null : returnStatement.copy();
    result.insertBody = insertBody == null ? null : insertBody.copy();
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLCreateVertexStatement) o;

    if (!Objects.equals(targetClass, that.targetClass)) {
      return false;
    }
    if (!Objects.equals(returnStatement, that.returnStatement)) {
      return false;
    }
    return Objects.equals(insertBody, that.insertBody);
  }

  @Override
  public int hashCode() {
    var result = targetClass != null ? targetClass.hashCode() : 0;
    result = 31 * result + (returnStatement != null ? returnStatement.hashCode() : 0);
    result = 31 * result + (insertBody != null ? insertBody.hashCode() : 0);
    return result;
  }

  public SQLIdentifier getTargetClass() {
    return targetClass;
  }

  public void setTargetClass(SQLIdentifier targetClass) {
    this.targetClass = targetClass;
  }

  public SQLProjection getReturnStatement() {
    return returnStatement;
  }

  public void setReturnStatement(SQLProjection returnStatement) {
    this.returnStatement = returnStatement;
  }

  public SQLInsertBody getInsertBody() {
    return insertBody;
  }

  public void setInsertBody(SQLInsertBody insertBody) {
    this.insertBody = insertBody;
  }
}
/* JavaCC - OriginalChecksum=0ac3d3f09a76b9924a17fd05bc293863 (do not edit this line) */

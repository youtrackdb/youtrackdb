/* Generated By:JJTree: Do not edit this line. SQLInsertStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.internal.core.command.BasicCommandContext;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.InsertExecutionPlan;
import com.jetbrains.youtrack.db.internal.core.sql.executor.InsertExecutionPlanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class SQLInsertStatement extends SQLStatement {

  SQLIdentifier targetClass;
  SQLIndexIdentifier targetIndex;
  SQLInsertBody insertBody;
  SQLProjection returnStatement;
  SQLSelectStatement selectStatement;
  boolean selectInParentheses = false;
  boolean selectWithFrom = false;
  boolean unsafe = false;

  public SQLInsertStatement(int id) {
    super(id);
  }

  public SQLInsertStatement(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("INSERT INTO ");
    if (targetClass != null) {
      targetClass.toString(params, builder);
    }
    if (targetIndex != null) {
      targetIndex.toString(params, builder);
    }
    if (insertBody != null) {
      builder.append(" ");
      insertBody.toString(params, builder);
    }
    if (returnStatement != null) {
      builder.append(" RETURN ");
      returnStatement.toString(params, builder);
    }
    if (selectStatement != null) {
      builder.append(" ");
      if (selectWithFrom) {
        builder.append("FROM ");
      }
      if (selectInParentheses) {
        builder.append("(");
      }
      selectStatement.toString(params, builder);
      if (selectInParentheses) {
        builder.append(")");
      }
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    builder.append("INSERT INTO ");
    if (targetClass != null) {
      targetClass.toGenericStatement(builder);
    }
    if (targetIndex != null) {
      targetIndex.toGenericStatement(builder);
    }
    if (insertBody != null) {
      builder.append(" ");
      insertBody.toGenericStatement(builder);
    }
    if (returnStatement != null) {
      builder.append(" RETURN ");
      returnStatement.toGenericStatement(builder);
    }
    if (selectStatement != null) {
      builder.append(" ");
      if (selectWithFrom) {
        builder.append("FROM ");
      }
      if (selectInParentheses) {
        builder.append("(");
      }
      selectStatement.toGenericStatement(builder);
      if (selectInParentheses) {
        builder.append(")");
      }
    }
    if (unsafe) {
      builder.append(" UNSAFE");
    }
  }

  @Override
  public SQLInsertStatement copy() {
    var result = new SQLInsertStatement(-1);
    result.targetClass = targetClass == null ? null : targetClass.copy();
    result.targetIndex = targetIndex == null ? null : targetIndex.copy();
    result.insertBody = insertBody == null ? null : insertBody.copy();
    result.returnStatement = returnStatement == null ? null : returnStatement.copy();
    result.selectStatement = selectStatement == null ? null : selectStatement.copy();
    result.selectInParentheses = selectInParentheses;
    result.selectWithFrom = selectWithFrom;
    result.unsafe = unsafe;
    return result;
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal session, Object[] args, CommandContext parentCtx,
      boolean usePlanCache) {
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabaseSession(session);
    Map<Object, Object> params = new HashMap<>();
    if (args != null) {
      for (var i = 0; i < args.length; i++) {
        params.put(i, args[i]);
      }
    }
    ctx.setInputParameters(params);
    InsertExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = createExecutionPlan(ctx, false);
    } else {
      executionPlan = (InsertExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }
    executionPlan.executeInternal();
    return new LocalResultSet(session, executionPlan);
  }

  @Override
  public ResultSet execute(
      DatabaseSessionInternal session, Map<Object, Object> params, CommandContext parentCtx,
      boolean usePlanCache) {
    var ctx = new BasicCommandContext();
    if (parentCtx != null) {
      ctx.setParentWithoutOverridingChild(parentCtx);
    }
    ctx.setDatabaseSession(session);
    ctx.setInputParameters(params);
    InsertExecutionPlan executionPlan;
    if (usePlanCache) {
      executionPlan = createExecutionPlan(ctx, false);
    } else {
      executionPlan = (InsertExecutionPlan) createExecutionPlanNoCache(ctx, false);
    }
    executionPlan.executeInternal();
    return new LocalResultSet(session, executionPlan);
  }

  public InsertExecutionPlan createExecutionPlan(CommandContext ctx, boolean enableProfiling) {
    var planner = new InsertExecutionPlanner(this);
    var result = planner.createExecutionPlan(ctx, enableProfiling);
    result.setStatement(originalStatement);
    result.setGenericStatement(this.toGenericStatement());
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLInsertStatement) o;

    if (selectInParentheses != that.selectInParentheses) {
      return false;
    }
    if (selectWithFrom != that.selectWithFrom) {
      return false;
    }
    if (unsafe != that.unsafe) {
      return false;
    }
    if (!Objects.equals(targetClass, that.targetClass)) {
      return false;
    }
    if (!Objects.equals(targetIndex, that.targetIndex)) {
      return false;
    }
    if (!Objects.equals(insertBody, that.insertBody)) {
      return false;
    }
    if (!Objects.equals(returnStatement, that.returnStatement)) {
      return false;
    }
    return Objects.equals(selectStatement, that.selectStatement);
  }

  @Override
  public int hashCode() {
    var result = targetClass != null ? targetClass.hashCode() : 0;
    result = 31 * result + (targetIndex != null ? targetIndex.hashCode() : 0);
    result = 31 * result + (insertBody != null ? insertBody.hashCode() : 0);
    result = 31 * result + (returnStatement != null ? returnStatement.hashCode() : 0);
    result = 31 * result + (selectStatement != null ? selectStatement.hashCode() : 0);
    result = 31 * result + (selectInParentheses ? 1 : 0);
    result = 31 * result + (selectWithFrom ? 1 : 0);
    result = 31 * result + (unsafe ? 1 : 0);
    return result;
  }

  public SQLIdentifier getTargetClass() {
    return targetClass;
  }

  public SQLIndexIdentifier getTargetIndex() {
    return targetIndex;
  }

  public SQLInsertBody getInsertBody() {
    return insertBody;
  }

  public SQLProjection getReturnStatement() {
    return returnStatement;
  }

  public SQLSelectStatement getSelectStatement() {
    return selectStatement;
  }

  public boolean isSelectInParentheses() {
    return selectInParentheses;
  }

  public boolean isSelectWithFrom() {
    return selectWithFrom;
  }

  public boolean isUnsafe() {
    return unsafe;
  }
}
/* JavaCC - OriginalChecksum=ccfabcf022d213caed873e6256cb26ad (do not edit this line) */

/* Generated By:JJTree: Do not edit this line. SQLSuffixIdentifier.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.BaseException;
import com.jetbrains.youtrack.db.api.exception.CommandExecutionException;
import com.jetbrains.youtrack.db.api.exception.RecordNotFoundException;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.query.ResultSet;
import com.jetbrains.youtrack.db.api.record.Entity;
import com.jetbrains.youtrack.db.api.record.Identifiable;
import com.jetbrains.youtrack.db.api.schema.Collate;
import com.jetbrains.youtrack.db.internal.common.util.Resettable;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.id.ContextualRecordId;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityInternal;
import com.jetbrains.youtrack.db.internal.core.sql.executor.AggregationContext;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

public class SQLSuffixIdentifier extends SimpleNode {

  protected SQLIdentifier identifier;
  protected SQLRecordAttribute recordAttribute;
  protected boolean star = false;

  public SQLSuffixIdentifier(int id) {
    super(id);
  }

  public SQLSuffixIdentifier(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public SQLSuffixIdentifier(SQLIdentifier identifier) {
    this.identifier = identifier;
  }

  public SQLSuffixIdentifier(SQLRecordAttribute attr) {
    this.recordAttribute = attr;
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    if (identifier != null) {
      identifier.toString(params, builder);
    } else if (recordAttribute != null) {
      recordAttribute.toString(params, builder);
    } else if (star) {
      builder.append("*");
    }
  }

  public void toGenericStatement(StringBuilder builder) {
    if (identifier != null) {
      identifier.toGenericStatement(builder);
    } else if (recordAttribute != null) {
      recordAttribute.toGenericStatement(builder);
    } else if (star) {
      builder.append("*");
    }
  }

  public Object execute(Identifiable iCurrentRecord, CommandContext ctx) {
    if (star) {
      return iCurrentRecord;
    }

    var db = ctx.getDatabaseSession();
    if (identifier != null) {
      var varName = identifier.getStringValue();
      if (varName.equalsIgnoreCase("$parent")) {
        return ctx.getParent();
      }
      if (varName.startsWith("$") && ctx.getVariable(varName) != null) {
        return ctx.getVariable(varName);
      }

      if (iCurrentRecord != null) {
        if (iCurrentRecord instanceof ContextualRecordId) {
          var meta = ((ContextualRecordId) iCurrentRecord).getContext();
          if (meta != null && meta.containsKey(varName)) {
            return meta.get(varName);
          }
        }
        try {
          Entity rec = iCurrentRecord.getRecord(db);
          if (rec.isUnloaded()) {
            rec = ctx.getDatabaseSession().bindToSession(rec);
          }

          var result = rec.getProperty(varName);
          if (result == null && ctx != null) {
            result = ctx.getVariable(varName);
          }
          return result;
        } catch (CommandExecutionException rnf) {
          return null;
        }
      }
      return varName;
    }
    if (recordAttribute != null && iCurrentRecord != null) {
      try {
        Entity rec =
            iCurrentRecord instanceof Entity
                ? (Entity) iCurrentRecord
                : iCurrentRecord.getRecord(db);
        return recordAttribute.evaluate(rec, ctx);
      } catch (RecordNotFoundException rnf) {
        return null;
      }
    }

    return null;
  }

  public Object execute(Result iCurrentRecord, CommandContext ctx) {
    if (star) {
      return iCurrentRecord;
    }
    if (identifier != null) {
      var varName = identifier.getStringValue();
      if (ctx != null && varName.equalsIgnoreCase("$parent")) {
        return ctx.getParent();
      }
      if (ctx != null && varName.startsWith("$") && ctx.getVariable(varName) != null) {
        var result = ctx.getVariable(varName);
        if (result instanceof Resettable) {
          ((Resettable) result).reset();
        }
        return result;
      }
      if (iCurrentRecord != null) {
        if (iCurrentRecord.hasProperty(varName)) {
          return iCurrentRecord.getProperty(varName);
        }

        if (iCurrentRecord instanceof ResultInternal resultInternal
            && resultInternal.getMetadataKeys().contains(varName)) {
          return resultInternal.getMetadata(varName);
        }
        if (iCurrentRecord instanceof ResultInternal resultInternal
            && resultInternal.getTemporaryProperties().contains(varName)) {
          return resultInternal.getTemporaryProperty(varName);
        }
      }
      return null;
    }

    if (iCurrentRecord != null && recordAttribute != null) {
      return recordAttribute.evaluate(iCurrentRecord, ctx);
    }

    return null;
  }

  public Object execute(Map iCurrentRecord, CommandContext ctx) {
    if (star) {
      var result = new ResultInternal(ctx.getDatabaseSession());
      if (iCurrentRecord != null) {
        for (var x : ((Map<Object, Object>) iCurrentRecord).entrySet()) {
          result.setProperty("" + x.getKey(), x.getValue());
        }
        return result;
      }
      return iCurrentRecord;
    }
    if (identifier != null) {
      var varName = identifier.getStringValue();
      if (ctx != null && varName.equalsIgnoreCase("$parent")) {
        return ctx.getParent();
      }
      if (iCurrentRecord != null && iCurrentRecord.containsKey(varName)) {
        return iCurrentRecord.get(varName);
      }
      if (ctx != null && ctx.getVariable(varName) != null) {
        return ctx.getVariable(varName);
      }
      return null;
    }
    if (recordAttribute != null) {
      return iCurrentRecord.get(recordAttribute.name);
    }
    return null;
  }

  public Object execute(Iterable iterable, CommandContext ctx) {
    if (star) {
      return null;
    }
    List<Object> result = new ArrayList<>();
    for (var o : iterable) {
      result.add(execute(o, ctx));
    }
    return result;
  }

  public Object execute(Iterator iterator, CommandContext ctx) {
    if (star) {
      return null;
    }
    List<Object> result = new ArrayList<>();
    while (iterator.hasNext()) {
      result.add(execute(iterator.next(), ctx));
    }
    if (iterator instanceof ResultSet) {
      try {
        ((ResultSet) iterator).reset();
      } catch (Exception ignore) {
      }
    }
    return result;
  }

  public Object execute(CommandContext iCurrentRecord) {
    if (star) {
      return null;
    }
    if (identifier != null) {
      var varName = identifier.getStringValue();
      if (iCurrentRecord != null) {
        return iCurrentRecord.getVariable(varName);
      }
      return null;
    }
    if (recordAttribute != null && iCurrentRecord != null) {
      return iCurrentRecord.getVariable(recordAttribute.name);
    }
    return null;
  }

  public Object execute(Object currentValue, CommandContext ctx) {
    if (currentValue instanceof Result) {
      return execute((Result) currentValue, ctx);
    }
    if (currentValue instanceof Identifiable) {
      return execute((Identifiable) currentValue, ctx);
    }
    if (currentValue instanceof Map) {
      return execute((Map) currentValue, ctx);
    }
    if (currentValue instanceof CommandContext) {
      return execute((CommandContext) currentValue);
    }
    if (currentValue instanceof Iterable) {
      return execute((Iterable) currentValue, ctx);
    }
    if (currentValue instanceof Iterator) {
      return execute((Iterator) currentValue, ctx);
    }
    if (currentValue == null) {
      return execute((Result) null, ctx);
    }

    return null;
    // TODO other cases?
  }

  public boolean isBaseIdentifier() {
    return identifier != null;
  }

  public boolean needsAliases(Set<String> aliases) {
    if (identifier != null) {
      return aliases.contains(identifier.getStringValue());
    }
    if (recordAttribute != null) {
      for (var s : aliases) {
        if (s.equalsIgnoreCase(recordAttribute.name)) {
          return true;
        }
      }
    }
    return false;
  }

  public boolean isAggregate() {
    return false;
  }

  public boolean isCount() {
    return false;
  }

  public SQLSuffixIdentifier splitForAggregation(AggregateProjectionSplit aggregateProj) {
    return this;
  }

  public boolean isEarlyCalculated(CommandContext ctx) {
    return identifier != null && identifier.isEarlyCalculated(ctx);
  }

  public void aggregate(Object value, CommandContext ctx) {
    throw new UnsupportedOperationException(
        "this operation does not support plain aggregation: " + this);
  }

  public AggregationContext getAggregationContext(CommandContext ctx) {
    throw new UnsupportedOperationException(
        "this operation does not support plain aggregation: " + this);
  }

  public SQLSuffixIdentifier copy() {
    var result = new SQLSuffixIdentifier(-1);
    result.identifier = identifier == null ? null : identifier.copy();
    result.recordAttribute = recordAttribute == null ? null : recordAttribute.copy();
    result.star = star;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLSuffixIdentifier) o;

    if (star != that.star) {
      return false;
    }
    if (!Objects.equals(identifier, that.identifier)) {
      return false;
    }
    return Objects.equals(recordAttribute, that.recordAttribute);
  }

  @Override
  public int hashCode() {
    var result = identifier != null ? identifier.hashCode() : 0;
    result = 31 * result + (recordAttribute != null ? recordAttribute.hashCode() : 0);
    result = 31 * result + (star ? 1 : 0);
    return result;
  }

  public void extractSubQueries(SubQueryCollector collector) {
  }

  public boolean refersToParent() {
    return identifier != null && identifier.getStringValue().equalsIgnoreCase("$parent");
  }

  public void setValue(Object target, Object value, CommandContext ctx) {
    if (target instanceof Result) {
      setValue((Result) target, value, ctx);
    } else if (target instanceof Identifiable) {
      setValue((Identifiable) target, value, ctx);
    } else if (target instanceof Map) {
      setValue((Map) target, value, ctx);
    }
  }

  public void setValue(Identifiable target, Object value, CommandContext ctx) {
    if (target == null) {
      return;
    }
    Entity entity = null;
    if (target instanceof Entity) {
      entity = (Entity) target;
    } else {
      try {
        var rec = target.getRecord(ctx.getDatabaseSession());
        if (rec instanceof Entity) {
          entity = (Entity) rec;
        }
      } catch (RecordNotFoundException rnf) {
        throw BaseException.wrapException(
            new CommandExecutionException(ctx.getDatabaseSession(),
                "Cannot set record attribute " + recordAttribute + " on existing entity"),
            rnf, ctx.getDatabaseSession());
      }
    }
    if (entity != null) {
      entity.setProperty(identifier.getStringValue(), value);
    } else {
      throw new CommandExecutionException(ctx.getDatabaseSession(),
          "Cannot set record attribute " + recordAttribute + " on existing entity");
    }
  }

  public void setValue(Map target, Object value, CommandContext ctx) {
    if (target == null) {
      return;
    }
    if (identifier != null) {
      target.put(identifier.getStringValue(), value);
    } else if (recordAttribute != null) {
      target.put(recordAttribute.getName(), value);
    }
  }

  public void setValue(Result target, Object value, CommandContext ctx) {
    if (target == null) {
      return;
    }
    if (target instanceof ResultInternal intTarget) {
      if (identifier != null) {
        intTarget.setProperty(identifier.getStringValue(), value);
      } else if (recordAttribute != null) {
        intTarget.setProperty(recordAttribute.getName(), value);
      }
    } else {
      throw new CommandExecutionException(ctx.getDatabaseSession(),
          "Cannot set property on unmodifiable target: " + target);
    }
  }

  public void applyRemove(Object currentValue, CommandContext ctx) {
    if (currentValue == null) {
      return;
    }
    if (identifier != null) {
      if (currentValue instanceof ResultInternal) {
        ((ResultInternal) currentValue).removeProperty(identifier.getStringValue());
      } else if (currentValue instanceof Entity) {
        ((Entity) currentValue).removeProperty(identifier.getStringValue());
      } else if (currentValue instanceof Map) {
        ((Map) currentValue).remove(identifier.getStringValue());
      }
    }
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    if (identifier != null) {
      result.setProperty("identifier", identifier.serialize(db));
    }
    if (recordAttribute != null) {
      result.setProperty("recordAttribute", recordAttribute.serialize(db));
    }
    result.setProperty("star", star);
    return result;
  }

  public void deserialize(Result fromResult) {
    if (fromResult.getProperty("identifier") != null) {
      identifier = SQLIdentifier.deserialize(fromResult.getProperty("identifier"));
    }
    if (fromResult.getProperty("recordAttribute") != null) {
      recordAttribute = new SQLRecordAttribute(-1);
      recordAttribute.deserialize(fromResult.getProperty("recordAttribute"));
    }
    star = fromResult.getProperty("star");
  }

  public boolean isDefinedFor(Result currentRecord) {
    if (identifier != null) {
      return currentRecord.hasProperty(identifier.getStringValue());
    }
    return true;
  }

  public boolean isDefinedFor(DatabaseSessionInternal db, Entity currentRecord) {
    if (identifier != null) {
      return ((EntityImpl) currentRecord.getRecord(db)).containsField(identifier.getStringValue());
    }
    return true;
  }

  public Collate getCollate(Result currentResult, CommandContext ctx) {
    if (identifier != null && currentResult != null) {
      var session = ctx.getDatabaseSession();
      if (currentResult.isEntity()) {
        var record = (EntityInternal) currentResult.castToEntity();
        var schemaClass = record.getImmutableSchemaClass(session);
        if (schemaClass != null) {
          var property = schemaClass.getProperty(session, identifier.getStringValue());
          if (property != null) {
            return property.getCollate(session);
          }
        }
      }
    }

    return null;
  }

  public SQLIdentifier getIdentifier() {
    return identifier;
  }

  public void setIdentifier(SQLIdentifier identifier) {
    this.identifier = identifier;
  }

  public boolean isCacheable() {
    return true;
  }

  public boolean isStar() {
    return star;
  }
}
/* JavaCC - OriginalChecksum=5d9be0188c7d6e2b67d691fb88a518f8 (do not edit this line) */

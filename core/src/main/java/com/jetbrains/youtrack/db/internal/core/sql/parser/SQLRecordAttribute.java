/* Generated By:JJTree: Do not edit this line. SQLRecordAttribute.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.jetbrains.youtrack.db.internal.core.sql.parser;

import com.jetbrains.youtrack.db.api.exception.RecordNotFoundException;
import com.jetbrains.youtrack.db.api.query.Result;
import com.jetbrains.youtrack.db.api.record.Entity;
import com.jetbrains.youtrack.db.internal.core.command.CommandContext;
import com.jetbrains.youtrack.db.internal.core.db.DatabaseSessionInternal;
import com.jetbrains.youtrack.db.internal.core.record.RecordAbstract;
import com.jetbrains.youtrack.db.internal.core.record.RecordInternal;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityImpl;
import com.jetbrains.youtrack.db.internal.core.record.impl.EntityInternal;
import com.jetbrains.youtrack.db.internal.core.record.impl.RecordBytes;
import com.jetbrains.youtrack.db.internal.core.sql.executor.ResultInternal;
import java.util.Map;
import java.util.Objects;

public class SQLRecordAttribute extends SimpleNode {

  protected String name;

  public SQLRecordAttribute(int id) {
    super(id);
  }

  public SQLRecordAttribute(YouTrackDBSql p, int id) {
    super(p, id);
  }

  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append(name);
  }

  @Override
  public void toGenericStatement(StringBuilder builder) {
    builder.append(name);
  }

  public SQLRecordAttribute copy() {
    var result = new SQLRecordAttribute(-1);
    result.name = name;
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    var that = (SQLRecordAttribute) o;

    return Objects.equals(name, that.name);
  }

  @Override
  public int hashCode() {
    return name != null ? name.hashCode() : 0;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Result serialize(DatabaseSessionInternal db) {
    var result = new ResultInternal(db);
    result.setProperty("name", name);
    return result;
  }

  public void deserialize(Result fromResult) {
    name = fromResult.getProperty("name");
  }

  public Object evaluate(Result iCurrentResult, CommandContext ctx) {
    var session = ctx.getDatabaseSession();
    if (name.equalsIgnoreCase("@rid")) {
      var identity = iCurrentResult.getIdentity();
      if (identity == null) {
        identity = iCurrentResult.getProperty(name);
      }
      return identity;
    } else if (name.equalsIgnoreCase("@class")) {
      if (iCurrentResult.isEntity()) {
        var schemaClass = ((EntityInternal) iCurrentResult.castToEntity()).getImmutableSchemaClass(
            session);
        if (schemaClass != null) {
          return schemaClass.getName(session);
        }
      }

      return null;
    } else if (name.equalsIgnoreCase("@version")) {
      if (iCurrentResult.isRecord()) {
        return iCurrentResult.castToRecord().getVersion();
      }
    } else if (name.equals("@type")) {
      if (iCurrentResult.isRecord()) {
        var r = iCurrentResult.castToRecord();
        var recordType = RecordInternal.getRecordType(ctx.getDatabaseSession(), r);
        if (recordType == EntityImpl.RECORD_TYPE) {
          return "document";
        } else if (recordType == RecordBytes.RECORD_TYPE) {
          return "bytes";
        } else {
          return "unknown";
        }
      }
      return null;
    } else if (name.equals("@size")) {
      if (iCurrentResult.isRecord()) {
        return ((RecordAbstract) iCurrentResult.castToRecord()).toStream().length;
      }
    } else if (name.equals("@raw")) {
      if (iCurrentResult.isRecord()) {
        return ((RecordAbstract) iCurrentResult.castToRecord()).toStream();
      }
      return null;
    } else if (name.equals("@rid")) {
      return iCurrentResult.getIdentity();
    }

    return null;
  }

  public Object evaluate(Entity iCurrentRecord, CommandContext ctx) {
    if (iCurrentRecord == null) {
      return null;
    }
    var session = ctx.getDatabaseSession();
    if (name.equalsIgnoreCase("@rid")) {
      return iCurrentRecord.getIdentity();
    } else if (name.equalsIgnoreCase("@class")) {
      return iCurrentRecord.getSchemaClassName();
    } else if (name.equalsIgnoreCase("@version")) {
      try {
        var record = iCurrentRecord.getRecord(session);
        return record.getVersion();
      } catch (RecordNotFoundException e) {
        return null;
      }
    }
    return null;
  }
}
/* JavaCC - OriginalChecksum=45ce3cd16399dec7d7ef89f8920d02ae (do not edit this line) */
